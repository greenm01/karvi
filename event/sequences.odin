package event

import "core:fmt"
import "core:os"
import "core:unicode/utf8"

// https://www.systutorials.com/docs/linux/man/4-console_codes/

// Sequence mappings.
keyboard_sequences := map[string]^Event {
	// Arrow keys
	"\x1b[A" =     new_key(code = Up),
	"\x1b[B" =     new_key(code = Down),
	"\x1b[C" =     new_key(code = Right),
	"\x1b[D" =     new_key(code = Left),
	"\x1b[1;2A" =  new_key(code = ShiftUp),
	"\x1b[1;2B" =  new_key(code = ShiftDown),
	"\x1b[1;2C" =  new_key(code = ShiftRight),
	"\x1b[1;2D" =  new_key(code = ShiftLeft),
	"\x1b[OA" =    new_key(code = ShiftUp),
	"\x1b[OB" =    new_key(code = ShiftDown),
	"\x1b[OC" =    new_key(code = ShiftRight),
	"\x1b[OD" =    new_key(code = ShiftLeft),
	"\x1b[a" =     new_key(code = ShiftUp),
	"\x1b[b" =     new_key(code = ShiftDown),
	"\x1b[c" =     new_key(code = ShiftRight),
	"\x1b[d" =     new_key(code = ShiftLeft),
	"\x1b[1;3A" =  new_key(code = Up, alt_pressed = true),
	"\x1b[1;3B" =  new_key(code = Down, alt_pressed = true),
	"\x1b[1;3C" =  new_key(code = Right, alt_pressed = true),
	"\x1b[1;3D" =  new_key(code = Left, alt_pressed = true),
	"\x1b\x1b[A" = new_key(code = Up, alt_pressed = true),
	"\x1b\x1b[B" = new_key(code = Down, alt_pressed = true),
	"\x1b\x1b[C" = new_key(code = Right, alt_pressed = true),
	"\x1b\x1b[D" = new_key(code = Left, alt_pressed = true),
	"\x1b[1;4A" =  new_key(code = ShiftUp, alt_pressed = true),
	"\x1b[1;4B" =  new_key(code = ShiftDown, alt_pressed = true),
	"\x1b[1;4C" =  new_key(code = ShiftRight, alt_pressed = true),
	"\x1b[1;4D" =  new_key(code = ShiftLeft, alt_pressed = true),
	"\x1b\x1b[a" = new_key(code = ShiftUp, alt_pressed = true),
	"\x1b\x1b[b" = new_key(code = ShiftDown, alt_pressed = true),
	"\x1b\x1b[c" = new_key(code = ShiftRight, alt_pressed = true),
	"\x1b\x1b[d" = new_key(code = ShiftLeft, alt_pressed = true),
	"\x1b[1;5A" =  new_key(code = CtrlUp),
	"\x1b[1;5B" =  new_key(code = CtrlDown),
	"\x1b[1;5C" =  new_key(code = CtrlRight),
	"\x1b[1;5D" =  new_key(code = CtrlLeft),
	"\x1b[Oa" =    new_key(code = CtrlUp, alt_pressed = true),
	"\x1b[Ob" =    new_key(code = CtrlDown, alt_pressed = true),
	"\x1b[Oc" =    new_key(code = CtrlRight, alt_pressed = true),
	"\x1b[Od" =    new_key(code = CtrlLeft, alt_pressed = true),
	"\x1b[1;6A" =  new_key(code = CtrlShiftUp),
	"\x1b[1;6B" =  new_key(code = CtrlShiftDown),
	"\x1b[1;6C" =  new_key(code = CtrlShiftRight),
	"\x1b[1;6D" =  new_key(code = CtrlShiftLeft),
	"\x1b[1;7A" =  new_key(code = CtrlUp, alt_pressed = true),
	"\x1b[1;7B" =  new_key(code = CtrlDown, alt_pressed = true),
	"\x1b[1;7C" =  new_key(code = CtrlRight, alt_pressed = true),
	"\x1b[1;7D" =  new_key(code = CtrlLeft, alt_pressed = true),
	"\x1b[1;8A" =  new_key(code = CtrlShiftUp, alt_pressed = true),
	"\x1b[1;8B" =  new_key(code = CtrlShiftDown, alt_pressed = true),
	"\x1b[1;8C" =  new_key(code = CtrlShiftRight, alt_pressed = true),
	"\x1b[1;8D" =  new_key(code = CtrlShiftLeft, alt_pressed = true),

	// Miscellaneous keys
	"\x1b[Z" =      new_key(code = ShiftTab),
	"\x1b[3~" =     new_key(code = Delete),
	"\x1b[3;3~" =   new_key(code = Delete, alt_pressed = true),
	"\x1b[1~" =     new_key(code = Home),
	"\x1b[1;3H~" =  new_key(code = Home, alt_pressed = true),
	"\x1b[4~" =     new_key(code = End),
	"\x1b[1;3F~" =  new_key(code = End, alt_pressed = true),
	"\x1b[5~" =     new_key(code = PgUp),
	"\x1b[5;3~" =   new_key(code = PgUp, alt_pressed = true),
	"\x1b[6~" =     new_key(code = PgDown),
	"\x1b[6;3~" =   new_key(code = PgDown, alt_pressed = true),
	"\x1b[7~" =     new_key(code = Home),
	"\x1b[8~" =     new_key(code = End),
	"\x1b\x1b[3~" = new_key(code = Delete, alt_pressed = true),
	"\x1b\x1b[5~" = new_key(code = PgUp, alt_pressed = true),
	"\x1b\x1b[6~" = new_key(code = PgDown, alt_pressed = true),
	"\x1b\x1b[7~" = new_key(code = Home, alt_pressed = true),
	"\x1b\x1b[8~" = new_key(code = End, alt_pressed = true),

	// Function keys
	"\x1bOP" =     new_key(code = F1),
	"\x1bOQ" =     new_key(code = F2),
	"\x1bOR" =     new_key(code = F3),
	"\x1bOS" =     new_key(code = F4),
	"\x1b[15~" =   new_key(code = F5),
	"\x1b[17~" =   new_key(code = F6),
	"\x1b[18~" =   new_key(code = F7),
	"\x1b[19~" =   new_key(code = F8),
	"\x1b[20~" =   new_key(code = F9),
	"\x1b[21~" =   new_key(code = F10),
	"\x1b[23~" =   new_key(code = F11),
	"\x1b[24~" =   new_key(code = F12),
	"\x1b[1;2P" =  new_key(code = F13),
	"\x1b[1;2Q" =  new_key(code = F14),
	"\x1b[1;2R" =  new_key(code = F15),
	"\x1b[1;2S" =  new_key(code = F16),
	"\x1b[15;2~" = new_key(code = F17),
	"\x1b[17;2~" = new_key(code = F18),
	"\x1b[18;2~" = new_key(code = F19),
	"\x1b[19;2~" = new_key(code = F20),

	// Function with the alt modifier
	"\x1b[1;3P" =  new_key(code = F1, alt_pressed = true),
	"\x1b[1;3Q" =  new_key(code = F2, alt_pressed = true),
	"\x1b[1;3R" =  new_key(code = F3, alt_pressed = true),
	"\x1b[1;3S" =  new_key(code = F4, alt_pressed = true),
	"\x1b[15;3~" = new_key(code = F5, alt_pressed = true),
	"\x1b[17;3~" = new_key(code = F6, alt_pressed = true),
	"\x1b[18;3~" = new_key(code = F7, alt_pressed = true),
	"\x1b[19;3~" = new_key(code = F8, alt_pressed = true),
	"\x1b[20;3~" = new_key(code = F9, alt_pressed = true),
	"\x1b[21;3~" = new_key(code = F10, alt_pressed = true),
	"\x1b[23;3~" = new_key(code = F11, alt_pressed = true),
	"\x1b[24;3~" = new_key(code = F12, alt_pressed = true),

	// Function keys, urxvt
	"\x1b[11~" = new_key(code = F1),
	"\x1b[12~" = new_key(code = F2),
	"\x1b[13~" = new_key(code = F3),
	"\x1b[14~" = new_key(code = F4),
	"\x1b[25~" = new_key(code = F13),
	"\x1b[26~" = new_key(code = F14),
	"\x1b[28~" = new_key(code = F15),
	"\x1b[29~" = new_key(code = F16),
	"\x1b[31~" = new_key(code = F17),
	"\x1b[32~" = new_key(code = F18),
	"\x1b[33~" = new_key(code = F19),
	"\x1b[34~" = new_key(code = F20),

	// Function keys with the alt modifier, urxvt
	"\x1b\x1b[11~" = new_key(code = F1, alt_pressed = true),
	"\x1b\x1b[12~" = new_key(code = F2, alt_pressed = true),
	"\x1b\x1b[13~" = new_key(code = F3, alt_pressed = true),
	"\x1b\x1b[14~" = new_key(code = F4, alt_pressed = true),
	"\x1b\x1b[25~" = new_key(code = F13, alt_pressed = true),
	"\x1b\x1b[26~" = new_key(code = F14, alt_pressed = true),
	"\x1b\x1b[28~" = new_key(code = F15, alt_pressed = true),
	"\x1b\x1b[29~" = new_key(code = F16, alt_pressed = true),
	"\x1b\x1b[31~" = new_key(code = F17, alt_pressed = true),
	"\x1b\x1b[32~" = new_key(code = F18, alt_pressed = true),
	"\x1b\x1b[33~" = new_key(code = F19, alt_pressed = true),
	"\x1b\x1b[34~" = new_key(code = F20, alt_pressed = true),
}

hex_codes := map[string]^Event {
	"1b0d" = new_key(code = Enter, alt_pressed = true),
	"1b7f" = new_key(code = Backspace, alt_pressed = true),
	
	// support other backspace variants
	"1b08" = new_key(code = Backspace, alt_pressed = true),
	"08" =   new_key(code = Backspace),
	
	// Powershell
	"1b4f41" = new_key(code = Up, alt_pressed = false),
	"1b4f42" = new_key(code = Down, alt_pressed = false),
	"1b4f43" = new_key(code = Right, alt_pressed = false),
	"1b4f44" = new_key(code = Left, alt_pressed = false),
}
